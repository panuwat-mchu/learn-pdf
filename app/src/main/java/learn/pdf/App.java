/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package learn.pdf;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        try {
            //new App().createPdf();
            App app = new App();

            Set<String> files = app.listFilesUsingJavaIO("src/main/resources/");
            System.out.println("size: "+files.size());

            for(String filename : files){
                System.out.println("filename: "+filename);
                app.stamp(filename);
            }

//            String src = "การบ้าน week 1-เด็กโต.PDF";
//            app.stamp(src);


        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void createPdf() throws FileNotFoundException, DocumentException {


        // create document
        Document document = new Document(PageSize.A4, 36, 36, 90, 36);
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("HeaderFooter.pdf"));
        MyFooter event = new MyFooter();
        writer.setPageEvent(event);

        // write to document
        document.open();
        document.add(new Paragraph("Adding a header to PDF Document using iText."));
        document.newPage();
        document.add(new Paragraph("Adding a footer to PDF Document using iText."));
        document.close();

    }

    class MyFooter extends PdfPageEventHelper {
        Font ffont = new Font(Font.FontFamily.UNDEFINED, 5, Font.ITALIC);

        public void onEndPage(PdfWriter writer, Document document) {
            PdfContentByte cb = writer.getDirectContent();
            Phrase header = new Phrase("this is a header", ffont);
            Phrase footer = new Phrase("this is a footer", ffont);
            ColumnText.showTextAligned(cb, Element.ALIGN_CENTER,
                    header,
                    (document.right() - document.left()) / 2 + document.leftMargin(),
                    document.top() + 10, 0);
            ColumnText.showTextAligned(cb, Element.ALIGN_CENTER,
                    footer,
                    (document.right() - document.left()) / 2 + document.leftMargin(),
                    document.bottom() - 10, 0);
        }
    }

    public void stamp(String src) throws IOException, DocumentException {
        PdfReader reader = new PdfReader(src);

        String dest = src.replace(".pdf","_print.pdf");
        PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(dest));
        stamper.setRotateContents(false);

        //Font ffont = new Font(Font.FontFamily.HELVETICA, 12, Font.ITALIC);
        Font ffont = new Font(BaseFont.createFont("fonts/THSarabunNew.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED),14);
        Phrase footer = new Phrase(src, ffont);

        int noOfPages = reader.getNumberOfPages();
        for(int i=1; i<=noOfPages; i++) {
            PdfContentByte canvas = stamper.getOverContent(i);
            ColumnText.showTextAligned(canvas, Element.ALIGN_LEFT, footer, 200, 22, 0);
        }
        stamper.close();
    }

    public Set<String> listFilesUsingJavaIO(String dir) {
        return Stream.of(new File(dir).listFiles())
                .filter(file -> !file.isDirectory())
                .map(File::getName)
                .collect(Collectors.toSet());
    }

}
